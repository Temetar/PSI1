#!/usr/bin/env python3
from lxml import etree #To edit xml
from tidylib import tidy_document #To tidy up (prettyprint) xml
from pathlib import Path #To read and write text (used in combination with tidylib)
from copy import deepcopy #To add the same subtree multiple times to one root
import shutil #To copy the config .txt files
import os #To run shell commands
import re #To find variable in string
import numpy as np #Better arrays
from time import sleep #Sleep is important

#TODO: Ability to choose starting point
##### Settings #####
hybrid_id = 1 #Port on the fc7, starting at 0
num_chips = 3 #Number of chips
chip_ids = range(num_chips) #Ids of the chips in increasing order, default is range(num_chips).
uri = "chtcp-2.0://localhost:10203?target=192.168.1.80:50001" #check if ip is correct
output_path = "/home/l_tester/work/pixel_phase2/Ph2_ACF_runs/tamar2/PythonScript/test/" #Path where the output files are saved. Should end in '/'.
start = {4} #0: Autogenerate 1: voltagetuning 2: latency 3: threshold equalization 4: threshold adjustment 5:scurve
####################

#Open Base tree and find insertion point
if (0 in start):
    parser = etree.XMLParser(remove_blank_text=True)
    tag = etree.parse("base.xml",parser)
    Hybrid = tag.find(".//Hybrid")
    Hybrid.set("Id", str(hybrid_id))
    connection = tag.find(".//connection")
    connection.set("uri", str(uri))
    #Change configuration file path
    RD53_Files = tag.find(".//RD53_Files")
    RD53_Files.set("path", str(output_path))

    #Insert child trees
    chip = etree.parse("chip.xml",parser)
    RD53 = chip.find("RD53")
    for i in range(num_chips):
        RD53.set("Id", str(chip_ids[i]))
        RD53.set("Lane", str(chip_ids[i]))
        RD53.set("configfile", "CMSIT_RD53_chip"+str(chip_ids[i])+".txt")
        Hybrid.insert(i+1,deepcopy(RD53))
        #Copy init files
        try:
            shutil.copyfile(r'/home/l_tester/work/pixel_phase2/Ph2_ACF_runs/tamar2/configs/init/CMSIT_RD53.txt', output_path+"CMSIT_RD53_chip"+str(i)+".txt")
        except FileNotFoundError:
            print("Directory not found, creating directory")
            shutil.os.mkdir(output_path)
            shutil.copyfile(r'/home/l_tester/work/pixel_phase2/Ph2_ACF_runs/tamar2/configs/init/CMSIT_RD53.txt', output_path+"CMSIT_RD53_chip"+str(i)+".txt")

    #Write to xml
    tag.write(output_path+"CMSIT_autogenerated.xml",pretty_print=True)

#Format xml
Result = Path(output_path+"CMSIT_autogenerated.xml").read_text()
document, errors = tidy_document(Result, options={'indent':'auto','indent-attributes':'yes', 'input-xml':'yes'})
Path(output_path+"CMSIT_autogenerated.xml").write_text(document)


#Auto-config starts here
if (1 in start):
    os.system('cd ..; CMSITminiDAQ -f ' + output_path + 'CMSIT_autogenerated.xml -c voltagetuning')
    for i in chip_ids:
        logfile = open(output_path + "CMSIT_RD53_chip"+str(i)+".txt")
        logfile = logfile.readlines()
        for line in logfile:
            if "VOLTAGE_TRIM_DIG" in line:
                VDD = int(re.match('VOLTAGE_TRIM_DIG          0xA2          0b10000                 0b(.*)                             5', line).group(1),2)
                document = document.replace('VOLTAGE_TRIM_DIG="16"','VOLTAGE_TRIM_DIG="'+str(VDD)+'"',1)
            elif "VOLTAGE_TRIM_ANA" in line:
                VDA = int(re.match('VOLTAGE_TRIM_ANA          0xA3          0b10000                 0b(.*)                             5', line).group(1),2)
                document = document.replace('VOLTAGE_TRIM_ANA="16"','VOLTAGE_TRIM_ANA="'+str(VDA)+'"',1)
    Path(output_path+"CMSIT_autogenerated.xml").write_text(document)
    print("Successfully set VDDD and VDDA")

    print("To apply the voltage tuning, please do a power cycle. Continuing in")
    for i in range(10,0,-1):
        print(i)
        sleep(1)
    sleep(2)

#Latency tuning

#Coarse latency
if (2 in start):
    document = document.replace('"DoFast">0','"DoFast">1')
    Path(output_path+"CMSIT_autogenerated.xml").write_text(document)
    os.system('cd ..; CMSITminiDAQ -f ' + output_path + 'CMSIT_autogenerated.xml -c latency')
    latency_max = 0
    latency_min = 511
    for i in chip_ids:
        logfile = open(output_path + "CMSIT_RD53_chip"+str(i)+".txt")
        logfile = logfile.readlines()
        for line in logfile:
            if "LATENCY_CONFIG" in line:
                #print(line)
                try:
                    latency_max_temp = int(re.match('LATENCY_CONFIG            0x25          0x01F4                  0x(.*)                             09', line).group(1),16)
                except AttributeError:
                    latency_max_temp = int(re.match('LATENCY_CONFIG            0x25          0b111110100             0b(.*)                         9', line).group(1),2)
                latency_max = max(latency_max, latency_max_temp)
                latency_min = min(latency_min, latency_max_temp - 10)
    document = document.replace('"LatencyStart">0','"LatencyStart">'+str(latency_min))
    document = document.replace('"LatencyStop">511','"LatencyStop">'+str(latency_max))
    Path(output_path+"CMSIT_autogenerated.xml").write_text(document)
    sleep(2)

#Fine Latency
if (2 in start):
    document = document.replace('"DoFast">1','"DoFast">0')
    document = document.replace('nTRIGxEvent">10','nTRIGxEvent">1')
    Path(output_path+"CMSIT_autogenerated.xml").write_text(document)
    os.system('cd ..; CMSITminiDAQ -f ' + output_path + 'CMSIT_autogenerated.xml -c latency')
    for i in chip_ids:
        logfile = open(output_path + "CMSIT_RD53_chip"+str(i)+".txt")
        logfile = logfile.readlines()
        for line in logfile:
            if "LATENCY_CONFIG" in line:
                #print(line)
                try:
                    latency = int(re.match('LATENCY_CONFIG            0x25          0x01F4                  0x(.*)                             09', line).group(1),16)
                except AttributeError:
                    latency = int(re.match('LATENCY_CONFIG            0x25          0b111110100             0b(.*)                         9', line).group(1),2)
                document = document.replace('LATENCY_CONFIG="136"','LATENCY_CONFIG="'+str(latency)+'"',1)
    Path(output_path+"CMSIT_autogenerated.xml").write_text(document)
    sleep(2)

#Threshold equalization
if (3 in start):
    os.system('cd ..; CMSITminiDAQ -f ' + output_path + 'CMSIT_autogenerated.xml -c threqu')
    sleep(2)
#Threshold adjustment
if (4 in start):
    os.system('cd ..; CMSITminiDAQ -f ' + output_path + 'CMSIT_autogenerated.xml -c thradj')
    for i in chip_ids:
        logfile = open(output_path + "CMSIT_RD53_chip"+str(i)+".txt")
        logfile = logfile.readlines()
        for line in logfile:
            if "Vthreshold_LIN" in line:
                #print(line)
                try:
                    Vthreshold = int(re.match('Vthreshold_LIN            0x14          0x0190                  0x(.*)                             10', line).group(1),16)
                except AttributeError:
                    print("Update the comment below with binary file")
                    sleep(1000)
                    #latency = int(re.match('LATENCY_CONFIG            0x25          0b111110100             0b(.*)                         9', line).group(1),2)
                document = document.replace('Vthreshold_LIN="400"','Vthreshold_LIN="'+str(Vthreshold)+'"',1)
    Path(output_path+"CMSIT_autogenerated.xml").write_text(document)
    sleep(2)
#SCurve
if (5 in start):
    os.system('cd ..; CMSITminiDAQ -f ' + output_path + 'CMSIT_autogenerated.xml -c scurve')